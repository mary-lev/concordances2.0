(dp1
S'output'
p2
S"<class '_mysql_exceptions.ProgrammingError'> (1111, 'Invalid use of group function')"
p3
sS'layer'
p4
S'/home/concordance/web2py/applications/test/controllers/concordance.py'
p5
sS'code'
p6
S'# coding: utf8\n# coding: utf8\nimport nltk\nimport pymorphy2\nfrom operator import itemgetter\nimport select\nimport gensim, logging\nfrom gensim import corpora, models, similarities\nfrom gensim.models import doc2vec\nlogging.basicConfig(format=\'%(asctime)s : %(levelname)s : %(message)s\', level=logging.INFO)\n\npartos = [\'VERB\', \'NOUN\', \'ADJF\', \'ADJS\', \'INFN\', \'GRND\', \'PRTF\', \'PRTS\', \'ADVB\']\n\ndef index(): # concordance of one text\n    all_words = trymysql(trymysql.allword.title==request.args(0)).select()\n    lens=len(all_words)\n    vocab = []\n    for row in all_words:\n        w = row.word\n        q = trymysql((trymysql.allword.word==row.word)&(trymysql.allword.title==request.args(0))).select()\n        qq = round(((len(q)/float(lens))*100), 2)\n        c = [w, len(q), qq]\n        if c not in vocab:\n            vocab.append(c)\n    vocab.sort(key = itemgetter(0), reverse=False)\n    return dict(lens=lens, vocab=vocab)\n\ndef create_concordance():\n    f = open(\'/home/concordance/dictionary.txt\', \'r\')\n    words = f.readlines()\n    return dict(words=words)\n\ndef create_number():\n    all_texts=trymysql(trymysql.allword.title<10).select()\n    concor=trymysql(trymysql.concordance.id>0).select()\n    words_concordance = [one.word for one in concor]\n    for all in all_texts:\n        if all.word in words_concordance:\n            number = trymysql(trymysql.concordance.word==all.word).select()[0]\n            number_id=number.id\n            all.update_record(concordance_number=number_id)\n        else:\n            all.update_record(concordance_number=0)\n    return dict(words=words_concordance[:10], all_texts=all_texts)\n\ndef create_vector():\n    all_texts=trymysql(trymysql.text1.id<10).select()\n    vector = []\n    for all in all_texts:\n        numbers = [all.concordance_number for all in trymysql(trymysql.allword.title==all.id).select()]\n        vector.append(numbers)\n    return dict(vector=vector)\n\nstop = [\'\xd1\x81\xd0\xb0\xd0\xbc\', \'\xd1\x82\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb9\', \'\xd1\x81\xd0\xb2\xd0\xbe\xd0\xb9\', \'\xd1\x8d\xd1\x82\xd0\xbe\xd1\x82\', \'\xd0\xb4\xd1\x80\xd1\x83\xd0\xb3\xd0\xbe\xd0\xb9\', \'\xd1\x85\xd0\xbe\xd1\x80\xd0\xbe\xd1\x88\xd0\xb8\xd0\xb9\', \'\xd1\x86\xd0\xb5\xd0\xbb\xd1\x8b\xd0\xb9\', \'\xd0\xb2\xd0\xb5\xd1\x81\xd1\x8c\', \'\xd1\x82\xd0\xbe\xd1\x82\', \'\xd0\xbf\xd0\xbe\xd1\x81\xd0\xbb\xd0\xb5\xd0\xb4\xd0\xbd\xd0\xb8\xd0\xb9\', \'\xd0\xbc\xd0\xbe\xd0\xb9\', \'\xd1\x82\xd0\xb2\xd0\xbe\xd0\xb9\', \'\xd0\xbd\xd0\xb0\xd1\x88\', \'\xd1\x80\xd0\xb0\xd0\xb7\', \'\xd0\xba\xd0\xb0\xd0\xba\xd0\xbe\xd0\xb9\', \'\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbd\', \'\xd0\xbd\xd0\xbe\xd0\xb2\xd1\x8b\xd0\xb9\', \'\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd1\x8b\xd0\xb9\', \'\xd1\x82\xd1\x83\xd0\xba\', \'\xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd1\x8b\xd0\xb9\', \'\xd0\xb1\xd0\xbe\xd0\xbb\xd1\x8c\xd1\x88\xd0\xbe\xd0\xb9\', \'\xd0\xb2\xd1\x81\xd1\x8f\xd0\xba\xd0\xb8\xd0\xb9\', \'\xd1\x81\xd0\xb0\xd0\xbc\xd1\x8b\xd0\xb9\']\n\ndef word2vec():\n    sentences1 = []\n    for all in trymysql(trymysql.text1.id>0).select():\n        part=[\'NOUN\', \'ADJF\', \'ADJS\']\n        one = [alles.word for alles in trymysql((trymysql.allword.title==all.id)&(trymysql.allword.partos.belongs(part))).select() if alles.word not in stop]\n        sentences1.append(one)\n    model1 = gensim.models.Word2Vec(sentences1, min_count=10, window=10, size=300)\n    model1.save("/home/concordance/web2py/applications/test/uploads/models/ann_model_from_10_win10_size300")\n    return dict(model1=model1)\n\ndef model():\n    new_model = gensim.models.Word2Vec.load("/home/concordance/web2py/applications/test/uploads/models/a_model_from_50_win20_size300")\n    #new_model = gensim.models.Word2Vec.load(\'/home/concordance/deposit/model3\')\n    words = [\'\xd0\xb3\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb4\', \'\xd0\xba\xd0\xbe\xd0\xbd\xd1\x8c\', \'\xd1\x81\xd0\xbe\xd0\xbd\', \'\xd0\xbe\xd0\xb3\xd0\xbe\xd0\xbd\xd1\x8c\', \'\xd0\xbc\xd0\xb8\xd1\x80\', \'\xd0\xbc\xd0\xbe\xd1\x80\xd0\xb5\', \'\xd0\xb4\xd0\xb5\xd0\xbd\xd1\x8c\', \'\xd0\xb4\xd0\xbe\xd0\xbc\', \'\xd0\xbd\xd0\xbe\xd1\x87\xd1\x8c\']\n    words = [all.decode(\'utf-8\') for all in words]\n    return dict(model1=new_model, words=words)\n\ndef doc2vec():\n    documents = []\n    authors = [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    titles = [all.id for all in trymysql(trymysql.text1.author.belongs(authors)).select()]\n    part=[\'ADJF\', \'NOUN\', \'VERB\']\n    for all in titles:\n        one = [alles.word for alles in trymysql((trymysql.allword.title==all)&(trymysql.allword.partos.belongs(part))).select()]\n        docs = gensim.models.doc2vec.TaggedDocument(words=one, tags=[all])\n        documents.append(docs)\n    model = gensim.models.doc2vec.Doc2Vec(documents, size=100, window=8, min_count=5, workers=4)\n    model.save("/home/concordance/web2py/applications/test/uploads/models/blok")\n#    for x in authors:\n#        newdocuments = []\n#        titles = [all.id for all in trymysql(trymysql.text1.author==x).select()]\n#        for all in titles:\n#            one = [alles.word for alles in trymysql((trymysql.allword.title==all)&(trymysql.allword.partos.belongs(part))).select()]\n#            docs = gensim.models.doc2vec.TaggedDocument(words=one, tags=[all])\n#            newdocuments.append(docs)\n#        model.train(newdocuments)\n#    model.save("/home/concordance/web2py/applications/test/uploads/models/texts")\n    c = model.docvecs.most_similar(9999)\n    docs = []\n    for all in c:\n        text = trymysql(trymysql.text1.id==all[0]).select()[0]\n        docs.append(text)\n    osn = trymysql(trymysql.text1.id==9999).select()[0]\n    return dict(documents=c, docs= docs, osn=osn)\n\ndef doc2vec_find():\n#    model = gensim.models.doc2vec.Doc2Vec.load("/home/concordance/web2py/applications/test/uploads/models/blok")\n    authors = [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    part=[\'ADJF\', \'NOUN\', \'VERB\']\n    newdocuments = []\n    for x in authors:\n        titles = [all.id for all in trymysql(trymysql.text1.author==x).select()]\n        for all in titles:\n            one = [alles.word for alles in trymysql((trymysql.allword.title==all)&(trymysql.allword.partos.belongs(part))).select()]\n            docs = gensim.models.doc2vec.TaggedDocument(words=one, tags=[all])\n            newdocuments.append(docs)\n    model = gensim.models.doc2vec.Doc2Vec(newdocuments, size=100, window=8, min_count=5, workers=4)\n    model.save("/home/concordance/web2py/applications/test/uploads/models/texts")\n    #c = model.docvecs.most_similar(\'8098L\')\n    return dict(model=model)\n\ndef couple_form():\n    form = SQLFORM.factory(Field(\'first\'), Field(\'second\')).process()\n    if form.accepted:\n        redirect(URL(\'couple\', vars = form.vars))\n    return dict(form=form)\n\ndef couple():\n    title = []\n    first = [all.title for all in trymysql(trymysql.allword.word==request.vars.first).select()]\n    for all in first:\n        if len(trymysql((trymysql.allword.word == request.vars.second)&(trymysql.allword.title==all)).select()) > 0:\n            title.append(all)\n    title = sorted(set(title))\n    texts = trymysql(trymysql.text1.id.belongs(title)).select()\n    return dict(title=title, one = request.vars.first, two = request.vars.second, texts=texts)\n\ndef test_gensim():\n    alles = []\n    for all in trymysql(trymysql.text1.id>0).select():\n        one=[new.word for new in trymysql((trymysql.allword.title==all.id)&(trymysql.allword.partos.belongs(("NOUN", "VERB")))).select()]\n        alles.append(one)\n    dictionary = gensim.corpora.Dictionary(alles)\n    corpus = [dictionary.doc2bow(alle) for alle in alles]\n    tfidf = models.TfidfModel(corpus, id2word=dictionary)\n    corpus_tfidf = tfidf[corpus]\n    lsi = models.lsimodel.LsiModel(corpus_tfidf, id2word=dictionary, num_topics=5)\n    #lda = gensim.models.ldamodel.LdaModel(corpus_tfidf, id2word=dictionary, num_topics=15, update_every=1, chunksize=10000, passes=1)\n    topics=lsi.print_topics(15)\n    return dict(topics=topics)\n\ndef birds():\n    new_model = gensim.models.Word2Vec.load("/home/concordance/web2py/applications/test/uploads/models/a_model_from_50_win20_size300")\n    return dict(model1=new_model)\n\ndef zveri():\n    new_model = gensim.models.Word2Vec.load("/home/concordance/web2py/applications/test/uploads/models/a_model_from_50_win20_size300")\n    words = [\'\xd0\xb2\xd0\xbe\xd0\xbb\xd0\xba\', \'\xd0\xb7\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8c\', \'\xd0\xba\xd0\xbe\xd0\xbd\xd1\x8c\', \'\xd0\xbb\xd0\xbe\xd1\x88\xd0\xb0\xd0\xb4\xd1\x8c\', \'\xd0\xbc\xd1\x8b\xd1\x88\xd1\x8c\', \'\xd0\xbf\xd1\x91\xd1\x81\', \'\xd1\x81\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xba\xd0\xb0\']\n    words = [all.decode(\'utf-8\') for all in words]\n    return dict(model1=new_model, words=words)\n\ndef conc():\n    all_texts=trymysql(trymysql.allword.id.count()>500).select()\n    return dict(all_texts=all_texts)\n\nresponse._vars=response._caller(conc)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/concordance/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/concordance/web2py/applications/test/controllers/concordance.py", line 161, in <module>\n  File "/home/concordance/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/concordance/web2py/applications/test/controllers/concordance.py", line 158, in conc\n    all_texts=trymysql(trymysql.allword.id.count()>500).select()\n  File "/home/concordance/web2py/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1882, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1847, in _select_aux\n    self.execute(sql)\n  File "/home/concordance/web2py/gluon/dal.py", line 1969, in execute\n    return self.log_execute(*a, **b)\n  File "/home/concordance/web2py/gluon/dal.py", line 1963, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/cursors.py", line 205, in execute\n    self.errorhandler(self, exc, value)\n  File "/usr/local/lib/python2.7/dist-packages/MySQLdb/connections.py", line 36, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1111, \'Invalid use of group function\')\n'
p11
s.