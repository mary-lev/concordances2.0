(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such table: text2"
p3
sS'layer'
p4
S'/home/concordance/web2py/applications/test/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nimport nltk\nfrom nltk.collocations import *\nimport pymorphy2\nfrom operator import itemgetter\nimport re, codecs, urllib, cStringIO, csv, os\nfrom tokenize1 import *\n\ndef index():\n    texts = test().select(test.text2.ALL, orderby=test.text2.author)\n    return dict(texts=texts)\n\ndef texts():\n    texts = test().select(test.text2.ALL, orderby=test.text2.title)\n    return dict(texts=texts)\n\ndef the_text(): # \xd0\xbf\xd0\xbe \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xbe\xd0\xbc\xd1\x83 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd1\x83 - \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xbe\xd0\xbf\xd1\x86\xd0\xb8\xd0\xb8 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb0\xd0\xbd\xd0\xb0\xd0\xbb\xd0\xb8\xd0\xb7\xd0\xb0 \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd0\xb8\n    text = test(test.text2.id==request.args(0)).select().first()\n    return dict(text=text)\n\ndef show():   # \xd0\xbf\xd0\xbe\xd0\xba\xd0\xb0\xd0\xb7\xd1\x8b\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\n    text = test(test.text2.id==request.args(0)).select().first()\n    return dict(text=text)\n\ndef author():\n    texts = test(test.morpho.author == request.args(0)).select()\n    return dict(texts=texts)\n\ndef tabliza(): # compare all texts in test.morpho (statistical approach)\n    table = test().select(test.morpho.ALL, orderby=test.morpho.author)\n    return dict(table=table)\n\ndef pos_table(): # compare all text in morphot.pos (POS)\n    table = morphot().select(morphot.pos.ALL, orderby=morphot.pos.author)\n    return dict(table=table)\n\ndef verbs_table():\n    table = morphot().select(morphot.verb.ALL, orderby=morphot.verb.author)\n    return dict(table=table)\n\ndef tokenize(): # prepares text for tokenization (decoding) and sorts resulted list alphabetically\n    text2 = test(test.text2.id==request.args(0)).select().first()\n    text1 = text2[\'body\'].decode(\'utf-8\')\n    tokens= tokenize1(text1)\n    normal = normaliz1(tokens)\n    tokens_encoded=[n.encode(\'utf-8\') for n in tokens]\n    tokens_id=test.tokens.insert(title=text2.title, author=text2.author, tokens=tokens_encoded)\n    normal.sort(key = itemgetter(0), reverse = False)\n#    lemmas=[n[0].encode(\'utf-8\') for n in normal]\n#    slovar_id=test.slovar.insert(title=text2.title, author=text2.author, lemmas=lemmas)\n    return dict(normal=normal, text2=text2)\n\ndef verbalize(): # count verbs and return top-10 of them\n    text2 = test(test.text2.id==request.args(0)).select().first()\n    text1 = text2[\'body\'].decode(\'utf-8\')\n    tokens = tokenize1(text1)\n    verb = verbalize1(tokens)\n    return dict(verb=verb, text2=text2)\n\ndef compare(): # \xd0\xa1\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbb\xd0\xb5\xd0\xba\xd1\x81\xd0\xb8\xd0\xba\xd1\x83 \xd0\xb4\xd0\xb2\xd1\x83\xd1\x85 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\n    text1=test(test.slovar.id==request.args(0)).select()[0]\n    text2=test(test.slovar.id==request.args(1)).select()[0]\n    lemmas1 = text1.lemmas\n    lemmas2=text2.lemmas\n    result= sorted(set(lemmas1) - set(lemmas2))\n    result2= sorted(set(lemmas2) - set(lemmas1))\n    l1 = len(lemmas1)\n    l2 = len(lemmas2)\n    all = len(lemmas1) - len(result)\n    return dict(result=result, result2=result2, l1=l1, l2=l2, all=all, text1=text1, text2=text2)\n\ndef index1(): # \xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xb0 \xd0\xb4\xd0\xb2\xd1\x83\xd1\x85 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2, \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd0\xb5\xd1\x82 id \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbe\xd0\xbf\xd0\xb5\xd1\x80\xd0\xb0\xd1\x86\xd0\xb8 \xd1\x81\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbb\xd0\xb5\xd0\xba\xd1\x81\xd0\xb8\xd0\xba\xd0\xb8 (compare)\n    options = [OPTION(texts.title, _value=texts.id) for texts in test().select(test.slovar.ALL)]\n    form=FORM(TABLE(TR("\xd0\x92\xd1\x8b\xd0\xb1\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd1\x8b\xd0\xb9 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82",SELECT(*options, _name="first")),\n                    TR("\xd0\x92\xd1\x8b\xd0\xb1\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb9 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82",SELECT(*options, _name="second")),\n                    TR("",INPUT(_type="submit",_value="SUBMIT"))))\n    if form.process().accepted:\n        redirect(URL(\'compare\', args = [form.vars[\'first\'], form.vars[\'second\']]))\n        response.flash="form accepted"\n    return dict(form=form)\n\ndef index2(): # \xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80\xd0\xb0 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0, \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd0\xb5\xd1\x82 id \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb2\xd1\x8b\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb0 \xd0\xb8\xd0\xbd\xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0\xd1\x86\xd0\xb8\xd0\xb8 \xd0\xbe \xd0\xbd\xd0\xb5\xd0\xbc\n    options = [OPTION(texts.family, _value=texts.id) for texts in text().select(text.author.ALL)]\n    form=FORM(TABLE(TR("\xd0\x92\xd1\x8b\xd0\xb1\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd0\xb5 \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0",SELECT(*options, _name="first")),\n                    TR("",INPUT(_type="submit",_value="SUBMIT"))))\n    if form.process().accepted:\n        redirect(URL(\'author_data\', args = form.vars[\'first\']))\n        response.flash="form accepted"\n    return dict(form=form)\n\ndef author_data(): # \xd0\xb2\xd1\x8b\xd0\xb2\xd0\xbe\xd0\xb4\xd0\xb8\xd0\xbc \xd0\xb8\xd0\xbd\xd1\x84\xd0\xbe\xd1\x80\xd0\xbc\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8e \xd0\xbf\xd0\xbe \xd0\xb0\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0\xd0\xbc\n    texts = text(text.author.id==request.args(0)).select()\n    group=text(text.text.author==request.args(0)).select()\n    return dict(texts=texts, group=group)\n\ndef sort(): # prepares text for tokenization (decoding) and sorts resulted list descending\n        text2 = test(test.text2.id==request.args(0)).select().first()\n        text1 = text2[\'body\'].decode(\'utf-8\')\n        normal = normaliz1(tokenize1(text1))\n        normal.sort(key = itemgetter(1), reverse = True)\n        return dict(normal=normal, text2=text2)\n\ndef morpho():\n    text2 = test(test.text2.id==request.args(0)).select().first()\n    text1 = text2[\'body\'].decode(\'utf-8\')\n    sent = nltk.sent_tokenize(text1)\n    stop = [\',\', \'.\', \';\', \':\', \'!\', \'?\', \'...\', \'\xe2\x80\x94\', \'-\', \'\xc2\xab\', \'\xc2\xbb\', \'\xc2\xbb\', \'*\', \'"\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'0\']\n    for s in sent:\n        s1 = nltk.wordpunct_tokenize(s)\n        s2 = [ss.lower() for ss in s1 if ss not in stop]\n        morph = pymorphy2.MorphAnalyzer()\n        n = 0\n        for slovo in s2:\n            forms = morph.normal_forms(slovo)\n            n = n+1\n            n_id = test.new_form.insert(sentences=s, meaning = slovo.encode(\'utf-8\'), forms=u\' \'.join(forms).encode(\'utf-8\').strip())\n    form = FORM().process()\n    if form.accepted:\n        redirect(URL(\'index\'))\n    texts = test().select(test.new_form.ALL)\n    return dict(texts=texts, form=form)\n\ndef form1(): # get text from user\n    form = SQLFORM(test.text2).process()\n    if form.accepted:\n        redirect(URL(\'index\'))\n    return dict(form=form)\n\ndef from_file(): # get text from user\'s file\n    form = SQLFORM.factory(Field(\'fromfile\', \'upload\'))\n    return dict(form=form)\n\ndef url(): # get text from url\n    form = SQLFORM.factory(Field(\'urladres\')).process()\n    if form.accepted:\n        session.urladres=request.vars.urladres\n        redirect(URL(\'url_concordance\'))\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    return dict(form=form)\n\ndef url_concordance(): # create concordance from web page (get url, returns sorted list)\n    text1 = urllib.urlopen(session.urladres).read()\n    a = \'windows-1251\'\n    b = \'utf-8\'\n    if a in text1:\n        text2 = text1.decode(\'windows-1251\')\n    elif b in text1:\n        text2 = text1.decode(\'utf-8\')\n    else:\n        text2 = text1.decode(\'windows-1251\')\n    text2 = nltk.clean_html(text2)\n    normal = normaliz1(tokenize1(text2))\n    normal.sort(key = itemgetter(1), reverse = True)\n    url_id=test.url.insert(text=text2, urladres=session.urladres, wordfile=normal)\n    animals = test().select(test.url.ALL)\n    return dict(normal=normal, animals=animals)\n\ndef forma():\n    forma = test().select(test.morpho.ALL, orderby=test.morpho.id)\n    return dict(forma=forma)\n\ndef bigram():\n    text2 = test(test.text2.id==request.args(0)).select().first()\n    text1 = text2[\'body\'].decode(\'utf-8\')\n    normal = tokenize1(text1)\n    finder = BigramCollocationFinder.from_words(normal)\n    bigram_measures = nltk.collocations.BigramAssocMeasures()\n    scored = finder.score_ngrams(bigram_measures.raw_freq)\n    list = sorted(bigram for bigram, score in scored)\n#    list=finder.nbest(bigram_measures.pmi, 2)\n    return dict(list=list)\n\ndef dost():\n    texts = test(test.morpho.author == \'\xd0\x94\xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb5\xd0\xb2\xd1\x81\xd0\xba\xd0\xb8\xd0\xb9\').select()\n    return dict(texts=texts)\n\ndef oberiu_pos():\n    texts = test(test.morpho.groups==\'oberiu\').select()\n    pos = morphot(morphot.pos.groups == \'oberiu\').select()\n    return dict(texts=texts, pos=pos)\n\ndef pushkin():\n    texts = test(test.morpho.author == \'\xd0\x9f\xd1\x83\xd1\x88\xd0\xba\xd0\xb8\xd0\xbd\').select()\n    return dict(texts=texts)\n\ndef blok():\n    texts = test(test.morpho.author == \'\xd0\x91\xd0\xbb\xd0\xbe\xd0\xba\').select()\n    pos = morphot(morphot.pos.author == \'\xd0\x91\xd0\xbb\xd0\xbe\xd0\xba\').select()\n    return dict(texts=texts, pos=pos)\n\ndef download():\n    return response.download(request, test)\n\ndef info():   # \xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x82\xd0\xb0\xd1\x82\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xba\xd1\x83 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8 \xd1\x81\xd0\xbe\xd1\x85\xd1\x80\xd0\xb0\xd0\xbd\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xb2 \xd0\xb1\xd0\xb0\xd0\xb7\xd1\x83\n    text2 = test(test.text2.id==request.args(0)).select().first()\n    text1 = text2[\'body\'].decode(\'utf-8\')\n    normal = nltk.wordpunct_tokenize(text1)\n    sents = nltk.sent_tokenize(text1)\n    sentences = len(sents)\n    sr_words = 0\n    for s in sents:\n        words = nltk.wordpunct_tokenize(s)\n        sr_words = len(words) + sr_words\n    dlina_predl = float(sr_words)/len(sents)\n    dlina_predl = round(dlina_predl, 2)\n    summa = 0.0\n    quantity = 0\n    for words in normal:\n        summa = summa + len(words)\n        quantity = quantity + 1\n    sr_ar=round(summa/quantity, 2)\n    normal = normaliz1(tokenize1(text1))\n    slovar1 = len(normal)/float(quantity)\n    slovar = round(slovar1, 3)\n    morpho_id=test.morpho.insert(author=text2.author, title=text2.title, year=text2.year, number=quantity, sr_ar=sr_ar, slovar=slovar, slovoforma=len(normal), sentences=sentences, dlina_predl=dlina_predl)\n    return dict(sr_ar=sr_ar, quantity=quantity, text2=text2, sentences=sentences, dlina_predl=dlina_predl, normal=normal, slovar=slovar)\n\ndef chast_rechi(): # morphological analysis of unprepared text, returns number of every part of speech\n    text2 = test(test.text2.id==request.args(0)).select().first()\n    text1 = text2[\'body\'].decode(\'utf-8\')\n    text1 = nltk.wordpunct_tokenize(text1)\n    stop = [\',\', \'.\', \';\', \':\', \'!\', \'?\', \'...\', \'\xe2\x80\x94\', \'-\', \'\xc2\xab\', \'\xc2\xbb\', \'\xc2\xbb\', \'"\', \'*\', \'\xe2\x80\x94 \', \'!\xc2\xbb.\', \'!\xc2\xbb\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'0\']\n    tokens = [s.lower() for s in text1 if s not in stop]\n    morph = pymorphy2.MorphAnalyzer()\n    verb = 0.0\n    adjf = 0.0\n    adjs = 0.0\n    infn = 0.0\n    noun = 0.0\n    sluzh = 0.0\n    sl = []\n    for w in tokens:\n        f = morph.parse(w)[0]\n        if f.tag.POS == \'VERB\':\n            verb = verb+1\n        if f.tag.POS == \'ADJF\':\n            adjf = adjf + 1\n        if f.tag.POS == \'ADJS\':\n            adjs = adjs + 1\n        if f.tag.POS == \'INFN\':\n            infn = infn + 1\n        if f.tag.POS == \'NOUN\':\n            noun = noun + 1\n        if f.tag.POS == \'PREP\' or f.tag.POS == \'CONJ\' or f.tag.POS == \'PRCL\':\n            sluzh = sluzh + 1\n            sl.append(w)\n    sr_verb = round(float(verb)/len(tokens), 3)\n    sr_adjf = round(float(adjf)/len(tokens), 3)\n    sr_adjs = round(float(adjs)/len(tokens), 3)\n    sr_infn = round(float(infn)/len(tokens), 3)\n    sr_noun = round(float(noun)/len(tokens), 3)\n    sr_sluzh = round(float(sluzh)/len(tokens), 3)\n    morphot_id=morphot.pos.insert(author=text2.author, title=text2.title, noun=sr_noun, verb=sr_verb, adjf=sr_adjf, adjs=sr_adjs, infn=sr_infn, sluzh=sr_sluzh, year=text2.year)\n    return dict(verb=int(verb), sr_verb=sr_verb, adjf=int(adjf), sr_adjf=sr_adjf, adjs=int(adjs), sr_adjs=sr_adjs, infn=int(infn), sr_infn=sr_infn, noun=int(noun), sr_noun=sr_noun, sluzh=int(sluzh), sr_sluzh=sr_sluzh, text2=text2, sl=sl)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'sqlite3'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of OperationalError object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of OperationalError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of OperationalError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of OperationalError object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S"<method-wrapper '__init__' of OperationalError object>"
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of OperationalError object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of OperationalError object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of OperationalError object>'
p35
sS'__class__'
p36
S"<class 'sqlite3.OperationalError'>"
p37
sS'__doc__'
p38
S'None'
p39
sS'__getitem__'
p40
S"<method-wrapper '__getitem__' of OperationalError object>"
p41
sS'__setstate__'
p42
S'<built-in method __setstate__ of OperationalError object>'
p43
sS'__getattribute__'
p44
S"<method-wrapper '__getattribute__' of OperationalError object>"
p45
sS'args'
p46
S"('no such table: text2',)"
p47
sS'__subclasshook__'
p48
S'<built-in method __subclasshook__ of type object>'
p49
sS'__unicode__'
p50
S'<built-in method __unicode__ of OperationalError object>'
p51
sS'__delattr__'
p52
S"<method-wrapper '__delattr__' of OperationalError object>"
p53
sS'__repr__'
p54
S"<method-wrapper '__repr__' of OperationalError object>"
p55
sS'__hash__'
p56
S"<method-wrapper '__hash__' of OperationalError object>"
p57
ssS'evalue'
p58
S'no such table: text2'
p59
sS'request'
p60
cgluon.html
XML_unpickle
p61
(S's\x8fC\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>test</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">DOCUMENT_ROOT</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTPS</td><td style="vertical-align:top;">:</td><td><div>on</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>*/*</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_CHARSET</td><td style="vertical-align:top;">:</td><td><div>windows-1251,utf-8;q=0.7,*;q=0.3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>concordance.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/23.0.1271.6 Safari/537.11</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_FORWARDED_FOR</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_REAL_IP</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/test/default/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>10.233.129.161</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>38972</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_URI</td><td style="vertical-align:top;">:</td><td><div>/test/default/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>concordance.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/concordance/web2py/applications/admin/&#x27;, &#x27;/home/concordance/web2py/applications/test/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">document_root</td><td style="vertical-align:top;">:</td><td><div>/usr/local/openresty/nginx/html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>*/*</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_charset</td><td style="vertical-align:top;">:</td><td><div>windows-1251,utf-8;q=0.7,*;q=0.3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip,deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>ru-RU,ru;q=0.8,en-US;q=0.6,en;q=0.4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>close</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>concordance.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (Windows NT 6.0) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/23.0.1271.6 Safari/537.11</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_forwarded_for</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_real_ip</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">https</td><td style="vertical-align:top;">:</td><td><div>on</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>harry-liveweb1</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>localhost</div></td></tr><tr><td><div>concordance.pythonanywhere.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/test/default/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>10.233.129.161</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>38972</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>GET</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/test/default/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>concordance.pythonanywhere.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>443</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.node</td><td style="vertical-align:top;">:</td><td><div>harry-liveweb1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi.version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_node</td><td style="vertical-align:top;">:</td><td><div>harry-liveweb1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uwsgi_version</td><td style="vertical-align:top;">:</td><td><div>2.0.5.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.5-stable+timestamp.2014.03.16.02.35.39</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f054eb1a9d0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f0524cd4528&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi_file__bin_user_wsgi_wrapper.ErrorLogFile object at 0x7f054eb1a9d0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;built-in function uwsgi_sendfile&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;uwsgi._Input object at 0x7f0524cd4528&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>https</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py/applications/test/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>index</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/concordance/web2py/applications/admin/&#x27;, &#x27;/home/concordance/web2py/applications/test/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>harry-liveweb1</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>50.19.109.98</div></td></tr><tr><td><div>localhost</div></td></tr><tr><td><div>concordance.pythonanywhere.com</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.9.5-stable+timestamp.2014.03.16.02.35.39</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2015, 3, 14, 17, 16, 50, 249488)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/test/default/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2015, 3, 14, 17, 16, 50, 249525)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">uuid</td><td style="vertical-align:top;">:</td><td><div>test/31.202.243.168.2015-03-14.17-16-50.d673d761-4780-4780-9152-7a269574d735</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f0523ccac90&gt;</div></td></tr></table></div>'
tRp62
sS'frames'
p63
(lp64
(dp65
S'file'
p66
S'/home/concordance/web2py/gluon/restricted.py'
p67
sS'dump'
p68
(dp69
S'environment'
p70
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'BigramCollocationFinder': <class 'nltk.collocations.BigramCollocationFinder'>, 'CAT': <class 'gluon.html.CAT'>, ...}"
p71
sS'ccode'
p72
S'<code object <module> at 0x7f0523c4bf30, file "/...pplications/test/controllers/default.py", line 2>'
p73
ssS'lnum'
p74
I220
sS'lines'
p75
(dp76
I224
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p77
sI215
S'    try:'
p78
sI216
S'        if isinstance(code, types.CodeType):'
p79
sI217
S'            ccode = code'
p80
sI218
S'        else:'
p81
sI219
S'            ccode = compile2(code, layer)'
p82
sI220
S'        exec ccode in environment'
p83
sI221
S'    except HTTP:'
p84
sI222
S'        raise'
p85
sI223
S'    except RestrictedError:'
p86
ssS'call'
p87
S"(code='# -*- coding: utf-8 -*-\\nimport nltk\\nfrom nltk.co..., sl=sl)\\n\\nresponse._vars=response._caller(index)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'BigramCollocationFinder': <class 'nltk.collocations.BigramCollocationFinder'>, 'CAT': <class 'gluon.html.CAT'>, ...}, layer='/home/concordance/web2py/applications/test/controllers/default.py')"
p88
sS'func'
p89
S'restricted'
p90
sa(dp91
g66
S'/home/concordance/web2py/applications/test/controllers/default.py'
p92
sg68
(dp93
sg74
I258
sg75
(dp94
I256
S'    return dict(verb=int(verb), sr_verb=sr_verb, adjf=int(adjf), sr_adjf=sr_adjf, adjs=int(adjs), sr_adjs=sr_adjs, infn=int(infn), sr_infn=sr_infn, noun=int(noun), sr_noun=sr_noun, sluzh=int(sluzh), sr_sluzh=sr_sluzh, text2=text2, sl=sl)'
p95
sI247
S'            sluzh = sluzh + 1'
p96
sI248
S'            sl.append(w)'
p97
sI249
S'    sr_verb = round(float(verb)/len(tokens), 3)'
p98
sI250
S'    sr_adjf = round(float(adjf)/len(tokens), 3)'
p99
sI251
S'    sr_adjs = round(float(adjs)/len(tokens), 3)'
p100
sI252
S'    sr_infn = round(float(infn)/len(tokens), 3)'
p101
sI253
S'    sr_noun = round(float(noun)/len(tokens), 3)'
p102
sI254
S'    sr_sluzh = round(float(sluzh)/len(tokens), 3)'
p103
sI255
S'    morphot_id=morphot.pos.insert(author=text2.author, title=text2.title, noun=sr_noun, verb=sr_verb, adjf=sr_adjf, adjs=sr_adjs, infn=sr_infn, sluzh=sr_sluzh, year=text2.year)'
p104
ssg87
S'()'
p105
sg89
S'<module>'
p106
sa(dp107
g66
S'/home/concordance/web2py/gluon/globals.py'
p108
sg68
(dp109
S'self'
p110
S'undefined'
p111
sS'f'
S'<function index>'
p112
ssg74
I385
sg75
(dp113
I384
S'        self._vars = None'
p114
sI385
S'        self._caller = lambda f: f()'
p115
sI386
S'        self._view_environment = None'
p116
sI387
S'        self._custom_commit = None'
p117
sI388
S'        self._custom_rollback = None'
p118
sI389
S''
sI380
S'        self.menu = []             # used by the default view layout'
p119
sI381
S'        self.files = []            # used by web2py_ajax.html'
p120
sI382
S'        self.generic_patterns = []  # patterns to allow generic views'
p121
sI383
S"        self.delimiters = ('{{', '}}')"
p122
ssg87
S'(f=<function index>)'
p123
sg89
S'<lambda>'
p124
sa(dp125
g66
S'/home/concordance/web2py/applications/test/controllers/default.py'
p126
sg68
(dp127
S'orderby'
p128
g111
sS'global texts'
p129
S'<function texts>'
p130
sS'test.text2'
p131
S'<Table text2 (id,title,author,body,year,book)>'
p132
sS').select'
p133
g111
sS'test.text2.author'
p134
S'<gluon.dal.Field object>'
p135
sS'global test'
p136
S'<DAL uri="sqlite://storage.sqlite">'
p137
sS'test.text2.ALL'
p138
S'<gluon.dal.SQLALL object>'
p139
ssg74
I10
sg75
(dp140
I5
S'from operator import itemgetter'
p141
sI6
S'import re, codecs, urllib, cStringIO, csv, os'
p142
sI7
S'from tokenize1 import *'
p143
sI8
S''
sI9
S'def index():'
p144
sI10
S'    texts = test().select(test.text2.ALL, orderby=test.text2.author)'
p145
sI11
S'    return dict(texts=texts)'
p146
sI12
S''
sI13
S'def texts():'
p147
sI14
S'    texts = test().select(test.text2.ALL, orderby=test.text2.title)'
p148
ssg87
S'()'
p149
sg89
S'index'
p150
sa(dp151
g66
S'/home/concordance/web2py/gluon/dal.py'
p152
sg68
(dp153
S'self.query'
p154
S'None'
p155
sS'adapter.select'
p156
S'<bound method SQLiteAdapter.select of <gluon.dal.SQLiteAdapter object>>'
p157
sS'fields'
p158
S'[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]'
p159
sS'adapter'
p160
S'<gluon.dal.SQLiteAdapter object>'
p161
sS'attributes'
p162
S"{'orderby': <gluon.dal.Field object>}"
p163
sS'self'
p164
S'<Set None>'
p165
ssg74
I10525
sg75
(dp166
I10528
S'        return Expression(self.db,self._select(*fields,**attributes))'
p167
sI10529
S''
sI10520
S"                                    attributes.get('join',None),"
p168
sI10521
S"                                    attributes.get('left',None),"
p169
sI10522
S"                                    attributes.get('orderby',None),"
p170
sI10523
S"                                    attributes.get('groupby',None))"
p171
sI10524
S'        fields = adapter.expand_all(fields, tablenames)'
p172
sI10525
S'        return adapter.select(self.query,fields,attributes)'
p173
sI10526
S''
sI10527
S'    def nested_select(self,*fields,**attributes):'
p174
ssg87
S"(self=<Set None>, *fields=[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], **attributes={'orderby': <gluon.dal.Field object>})"
p175
sg89
S'select'
p176
sa(dp177
g66
S'/home/concordance/web2py/gluon/dal.py'
p178
sg68
(dp179
S'fields'
p180
S'[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]'
p181
sS'self'
p182
S'<gluon.dal.SQLiteAdapter object>'
p183
sS').select'
p184
S'<bound method SQLiteAdapter.select of <gluon.dal.SQLiteAdapter object>>'
p185
sS'attributes'
p186
S"{'orderby': <gluon.dal.Field object>}"
p187
sS'global SQLiteAdapter'
p188
S"<class 'gluon.dal.SQLiteAdapter'>"
p189
sS'query'
p190
S'None'
p191
sS'builtinsuper'
p192
S"<type 'super'>"
p193
ssg74
I2458
sg75
(dp194
I2453
S'        Note that the entire database, rather than one record, is locked'
p195
sI2454
S'        (it will be locked eventually anyway by the following UPDATE).'
p196
sI2455
S'        """'
p197
sI2456
S"        if attributes.get('for_update', False) and not 'cache' in attributes:"
p198
sI2457
S"            self.execute('BEGIN IMMEDIATE TRANSACTION;')"
p199
sI2458
S'        return super(SQLiteAdapter, self).select(query, fields, attributes)'
p200
sI2459
S''
sI2460
S'class SpatiaLiteAdapter(SQLiteAdapter):'
p201
sI2461
S"    drivers = ('sqlite3','sqlite2')"
p202
sI2462
S''
ssg87
S"(self=<gluon.dal.SQLiteAdapter object>, query=None, fields=[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], attributes={'orderby': <gluon.dal.Field object>})"
p203
sg89
g176
sa(dp204
g66
S'/home/concordance/web2py/gluon/dal.py'
p205
sg68
(dp206
S'fields'
p207
S'[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]'
p208
sS'self'
p209
S'<gluon.dal.SQLiteAdapter object>'
p210
sS'attributes'
p211
S"{'orderby': <gluon.dal.Field object>}"
p212
sS'self._select_aux'
p213
S'<bound method SQLiteAdapter._select_aux of <gluon.dal.SQLiteAdapter object>>'
p214
sS'sql'
p215
S"'SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;'"
p216
ssg74
I1882
sg75
(dp217
I1877
S'            return cache_model('
p218
sI1878
S'                key,'
p219
sI1879
S'                lambda self=self,args=args:self._select_aux(*args),'
p220
sI1880
S'                time_expire)'
p221
sI1881
S'        else:'
p222
sI1882
S'            return self._select_aux(sql,fields,attributes)'
p223
sI1883
S''
sI1884
S'    def _count(self, query, distinct=None):'
p224
sI1885
S'        tablenames = self.tables(query)'
p225
sI1886
S'        if query:'
p226
ssg87
S"(self=<gluon.dal.SQLiteAdapter object>, query=None, fields=[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], attributes={'orderby': <gluon.dal.Field object>})"
p227
sg89
g176
sa(dp228
g66
S'/home/concordance/web2py/gluon/dal.py'
p229
sg68
(dp230
S'self'
p231
S'<gluon.dal.SQLiteAdapter object>'
p232
sS'self.execute'
p233
S'<bound method SQLiteAdapter.execute of <gluon.dal.SQLiteAdapter object>>'
p234
sS'sql'
p235
S"'SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;'"
p236
ssg74
I1847
sg75
(dp237
I1842
S''
sI1843
S'    def _select_aux(self,sql,fields,attributes):'
p238
sI1844
S'        args_get = attributes.get'
p239
sI1845
S"        cache = args_get('cache',None)"
p240
sI1846
S'        if not cache:'
p241
sI1847
S'            self.execute(sql)'
p242
sI1848
S'            rows = self._fetchall()'
p243
sI1849
S'        else:'
p244
sI1850
S'            (cache_model, time_expire) = cache'
p245
sI1851
S"            key = self.uri + '/' + sql + '/rows'"
p246
ssg87
S"(self=<gluon.dal.SQLiteAdapter object>, sql='SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;', fields=[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], attributes={'orderby': <gluon.dal.Field object>})"
p247
sg89
S'_select_aux'
p248
sa(dp249
g66
S'/home/concordance/web2py/gluon/dal.py'
p250
sg68
(dp251
S'a'
S"('SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;',)"
p252
sS'self'
p253
S'<gluon.dal.SQLiteAdapter object>'
p254
sS'b'
g21
sS'self.log_execute'
p255
S'<bound method SQLiteAdapter.log_execute of <gluon.dal.SQLiteAdapter object>>'
p256
ssg74
I1969
sg75
(dp257
I1964
S'        self.db._timings.append((command,time.time()-t0))'
p258
sI1965
S'        del self.db._timings[:-TIMINGSSIZE]'
p259
sI1966
S'        return ret'
p260
sI1967
S''
sI1968
S'    def execute(self, *a, **b):'
p261
sI1969
S'        return self.log_execute(*a, **b)'
p262
sI1970
S''
sI1971
S'    def represent(self, obj, fieldtype):'
p263
sI1972
S'        field_is_type = fieldtype.startswith'
p264
sI1973
S'        if isinstance(obj, CALLABLETYPES):'
p265
ssg87
S"(self=<gluon.dal.SQLiteAdapter object>, *a=('SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;',), **b={})"
p266
sg89
S'execute'
p267
sa(dp268
g66
S'/home/concordance/web2py/gluon/dal.py'
p269
sg68
(dp270
S'a'
S"('SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;',)"
p271
sS'b'
g21
sS'self'
p272
S'<gluon.dal.SQLiteAdapter object>'
p273
sS'ret'
p274
g111
sS'self.cursor'
p275
S'<sqlite3.Cursor object>'
p276
sS'command'
p277
S"'SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;'"
p278
sS'self.cursor.execute'
p279
S'<built-in method execute of sqlite3.Cursor object>'
p280
ssg74
I1963
sg75
(dp281
I1958
S'            command = self.filter_sql_command(command)'
p282
sI1959
S'        if self.db._debug:'
p283
sI1960
S"            LOGGER.debug('SQL: %s' % command)"
p284
sI1961
S'        self.db._lastsql = command'
p285
sI1962
S'        t0 = time.time()'
p286
sI1963
S'        ret = self.cursor.execute(command, *a[1:], **b)'
p287
sI1964
S'        self.db._timings.append((command,time.time()-t0))'
p288
sI1965
S'        del self.db._timings[:-TIMINGSSIZE]'
p289
sI1966
S'        return ret'
p290
sI1967
S''
ssg87
S"(self=<gluon.dal.SQLiteAdapter object>, *a=('SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;',), **b={})"
p291
sg89
S'log_execute'
p292
sasS'pyver'
p293
S'Python 2.7.6: /usr/local/bin/uwsgi (prefix: /usr)'
p294
sS'session'
p295
g61
(S's\x1a\x00\x00\x00<div><table></table></div>'
tRp296
sS'etype'
p297
S"<class 'sqlite3.OperationalError'>"
p298
sS'date'
p299
S'Sat Mar 14 17:16:50 2015'
p300
sS'response'
p301
g61
(S'sR\x1d\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f0523ca6c70&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_test</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168-87acfc3f-28dd-4187-acc8-f9b04ab40b36<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>UA-52567545-1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="brand" href="http://concordances.ru"><b>concor<span>dances</span></b>.ru</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/test/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div><span class="highlighted">web2py</span></div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>http://concordances.ru</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>\xd0\x9e \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb5\xd0\xba\xd1\x82\xd0\xb5</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/about/test</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>\xd0\x90\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xba\xd0\xb0</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/admin/default/edit/test/controllers/default.py</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Maria Levchenko &lt;marylevchenko@gmail.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>\xd0\xa7\xd0\xb0\xd1\x81\xd1\x82\xd0\xbe\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9 \xd1\x81\xd0\xbb\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x80\xd1\x8c \xd1\x80\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd0\xbb\xd0\xb8\xd1\x82\xd0\xb5\xd1\x80\xd0\xb0\xd1\x82\xd1\x83\xd1\x80\xd1\x8b</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>concordance, natural language processing, critics</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/index/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_key</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_test</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/concordance/web2py/applications/test/sessions/31.202.243.168-87acfc3f-28dd-4187-acc8-f9b04ab40b36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>106f4c22ca06cc343e42b73a0d8492f6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>31.202.243.168-87acfc3f-28dd-4187-acc8-f9b04ab40b36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_test</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>test</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Test</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/index.html</div></td></tr></table></div>'
tRp302
sS'locals'
p303
(dp304
S'a'
S"('SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;',)"
p305
sS'self'
p306
S'<gluon.dal.SQLiteAdapter object>'
p307
sS'b'
g21
sS'command'
p308
S"'SELECT  text2.id, text2.title, text2.author, tex...ear, text2.book FROM text2 ORDER BY text2.author;'"
p309
sS't0'
p310
S'1426353410.623375'
p311
sssS'traceback'
p312
S'Traceback (most recent call last):\n  File "/home/concordance/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/concordance/web2py/applications/test/controllers/default.py", line 258, in <module>\n  File "/home/concordance/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/concordance/web2py/applications/test/controllers/default.py", line 10, in index\n    texts = test().select(test.text2.ALL, orderby=test.text2.author)\n  File "/home/concordance/web2py/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 2458, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1882, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1847, in _select_aux\n    self.execute(sql)\n  File "/home/concordance/web2py/gluon/dal.py", line 1969, in execute\n    return self.log_execute(*a, **b)\n  File "/home/concordance/web2py/gluon/dal.py", line 1963, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\nOperationalError: no such table: text2\n'
p313
s.