(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'static'"
p3
sS'layer'
p4
S'/home/concordance/web2py/applications/test/controllers/show.py'
p5
sS'code'
p6
S'# coding: utf8\n# \xd0\xbf\xd0\xbe\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd1\x87\xd1\x82\xd0\xbe-\xd0\xbb\xd0\xb8\xd0\xb1\xd0\xbe \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb0\n\ndef show1():   # show text from file\n    texts = trymysql(trymysql.text1.id==request.args(0)).select().first()\n    f = open(texts.filename, \'rb\')\n    content = f.readlines()\n    image = d(d.pages.text==request.args(0)).select().first()\n    image = image.url\n    return dict(texts=texts, content=content, image=image)\n\ndef show2(): # color the verbs\n    words = trymysql(trymysql.allword.title==request.args(0)).select()\n    content = []\n    for row in words:\n        if row.partos==\'VERB\':\n            new_words=str(row.lemma)+str(\'&\')\n            content.append(new_words)\n        else:\n            content.append(row.lemma)\n    return dict(content=content)\n\ndef show3(): #delete words\n    texts = trymysql(trymysql.text1.id==request.args(0)).select().first()\n    rows = trymysql(trymysql.allword.title==request.args(0)).select()\n    text_view = []\n    for row in rows:\n        text_view.append((row.lemma, row.id))\n    options = [OPTION(row.lemma, _value=row.id) for row in rows]\n    form=FORM(TABLE(TR("\xd0\x92\xd1\x8b\xd0\xb1\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd0\xb5 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82"),\n                    TR("\xd0\x9d\xd0\xb0\xd0\xbf\xd1\x80\xd0\xb8\xd0\xbc\xd0\xb5\xd1\x80, \xd1\x82\xd0\xb0\xd0\xba:",SELECT(*options, _name="first")),\n                    TR("",INPUT(_type="submit",_value="SUBMIT"))))\n    if form.accepts(request,session):\n        response.flash="form accepted"\n    return dict(text_view=text_view, form=form)\n\ndef show_variants(): # doesn\'t work\n    texts = trymysql(trymysql.text1.id==request.args(0)).select().first()\n    filename = "/home/concordance/web2py/applications/test/uploads/xml//4/481.xml"\n    f = open(filename, \'rb\')\n    content = f.read()\n    #if texts.id in [all.title for all in trymysql(trymysql.variants.id>0).select()]:\n    #    word = trymysql(trymysql.variants.title==texts.id).select().first()\n     #   word=word[\'comment_text\']\n    return dict(content=content)\n\nresponse._vars=response._caller(show1)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/concordance/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/concordance/web2py/applications/test/controllers/show.py", line 47, in <module>\n  File "/home/concordance/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/concordance/web2py/applications/test/controllers/show.py", line 5, in show1\n    texts = trymysql(trymysql.text1.id==request.args(0)).select().first()\n  File "/home/concordance/web2py/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1869, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1774, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/concordance/web2py/gluon/dal.py", line 1541, in expand\n    out = op(first, second, **optional_args)\n  File "/home/concordance/web2py/gluon/dal.py", line 1438, in EQ\n    self.expand(second, first.type))\n  File "/home/concordance/web2py/gluon/dal.py", line 1552, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/concordance/web2py/gluon/dal.py", line 2007, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'static\'\n'
p11
s.