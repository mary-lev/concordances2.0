(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: ''"
p3
sS'layer'
p4
S'/home/concordance/web2py/applications/test/controllers/show.py'
p5
sS'code'
p6
S'# coding: utf8\n# \xd0\xbf\xd0\xbe\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd1\x87\xd1\x82\xd0\xbe-\xd0\xbb\xd0\xb8\xd0\xb1\xd0\xbe \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb0\nfrom xml.etree import cElementTree as ET\nimport difflib\n\ndef show1():   # show text from file\n    texts = trymysql(trymysql.text1.id==request.args(0)).select().first()\n    f = open(texts.filename, \'rb\')\n    content = f.readlines()\n    image = [all.url for all in d(d.pages.text==request.args(0)).select()]\n    return dict(texts=texts, content=content, image=image)\n\ndef show2(): # \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd1\x8b \xd0\xb8\xd0\xb7 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x84\xd0\xb0\xd0\xb9\xd0\xbb\xd0\xb0, \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb0 \xd1\x81 \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd1\x8b\xd0\xbc\xd0\xb8 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xbc\xd0\xb5\xd0\xb6\xd0\xb4\xd1\x83 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd1\x84\xd0\xb0\xd0\xbc\xd0\xb8\n    text = trymysql(trymysql.text1.id==483).select()[0]\n    words_numbers = [all.id for all in trymysql(trymysql.allword.title==text.id).select()]\n    f = open(text.filename, \'rb\')\n    content = f.readlines()\n    f.close()\n    var = trymysql(trymysql.variants.title==text.id).select(orderby=trymysql.variants.line)\n    words = [all.comment_text for all in var]\n    lines = [all.line for all in var]\n    #lines=[1,15]\n    return dict(text=text, content = content, words=words, lines=lines, var=var)\n\ndef show3(): #variants from txt files\n    text = trymysql(trymysql.text1.id==request.args(0)).select().first()\n    filename1 = text.filename\n    book = [text.book]\n    t1 = open(filename1, \'rb\')\n    text1 = t1.readlines()\n    # \xd0\xb8\xd1\x89\xd0\xb5\xd0\xbc \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd1\x8b \xd0\xb2 trymysql.drafts\n    variant = trymysql(trymysql.drafts.text==request.args(0)).select()\n    table = []\n    biblio = [text.book]\n    other = []\n    for all in variant:\n        filename2 = all.filename\n        book.append(all.book.short)\n        t2 = open(filename2, \'rb\')\n        text2 = t2.readlines()\n        # \xd1\x81\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbd\xd0\xb8\xd0\xb2\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd1\x8b\n        d = difflib.Differ()\n        result = list(d.compare(text1, text2))\n        table.append(result)\n        biblio.append(all.book.author + \'. \' + all.book.title + \'. \' + all.book.city + \': \' + all.book.editor + \', \' + all.book.year + \'. \' + all.book.part + ". C. " + all.book_page + \'.\')\n        n = {}\n        n[\'title\'] = all.title.upper()\n        n[\'dedication\'] = all.dedication\n        n[\'epi\'] = all.epi\n        n[\'epi_author\'] = all.epi_author\n        n[\'epi_book\'] = all.epi_book\n        other.append(n)\n    return dict(book=book, table=table, text=text, biblio=biblio, other=other)\n\ndef show_variants(): # try to show xml\n    t = \'483\'\n    texts = trymysql(trymysql.text1.id==t).select().first()\n    filename = "/home/concordance/web2py/applications/test/uploads/xml/4/" + t + ".xml"\n    x = open(filename, \'rb\').read()\n    root = ET.fromstring(x) # \xd0\xbf\xd0\xb0\xd1\x80\xd1\x81\xd0\xb8\xd0\xbc xml\n    s= [] # \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd1\x82 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\n    u = \'\' # \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd1\x82 \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8\n    new_line =\'\' # \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd1\x82 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xbd\xd0\xb0\xd1\x8f \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb0\n    variants = trymysql(trymysql.variants.title==t).select(orderby=trymysql.variants.line) # \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xb8\xd1\x81\xd0\xb8 \xd0\xbf\xd1\x80\xd0\xbe \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd1\x8b \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba \xd0\xb4\xd0\xbb\xd1\x8f \xd1\x8d\xd1\x82\xd0\xbe\xd0\xb3\xd0\xbe \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xb0 \xd0\xb8\xd0\xb7 \xd0\xb1\xd0\xb0\xd0\xb7\xd1\x8b\n    var_numbers = [all.line for all in variants] # \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb0 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba, \xd0\xb3\xd0\xb4\xd0\xb5 \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd1\x8b\n    var_lines = [all.comment_text for all in variants] # \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb5 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8 \xd0\xb8\xd0\xb7 \xd0\xb1\xd0\xb0\xd0\xb7\xd1\x8b\n    book = [all.comment_book for all in variants] # \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb8\xd1\x81\xd1\x82\xd0\xbe\xd1\x87\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb8 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2\n    books = [texts.book] # \xd0\xb8\xd1\x81\xd1\x82\xd0\xbe\xd1\x87\xd0\xbd\xd0\xb8\xd0\xba \xd0\xbe\xd1\x81\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x80\xd0\xb5\xd0\xb4\xd0\xb0\xd0\xba\xd1\x86\xd0\xb8\xd0\xb8 \xd0\xb8\xd0\xb7 trymysql.text1\n    for all in book:\n        books.append(trymysql(trymysql.biblio.id==all).select()[0].short) # \xd1\x81\xd0\xbe\xd0\xba\xd1\x80\xd0\xb0\xd1\x89\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xbd\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb8\xd0\xb7\xd0\xb4\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb9, \xd1\x81\xd0\xbe\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb0\xd1\x89\xd0\xb8\xd1\x85 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd1\x8b \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\n    for st in root.iter(\'stanza\'): # \xd0\xbf\xd0\xb0\xd1\x80\xd1\x81\xd0\xb8\xd0\xbc xml\n        strofa = [] # \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd1\x82 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd1\x84\xd0\xb0\n        for l in st.iter(\'line\'):\n            u = l.attrib[\'number\'] # \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80 \xd0\xb2\xd1\x8b\xd0\xbf\xd0\xb0\xd1\x80\xd1\x81\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8\n            line =[] # \xd1\x8d\xd1\x82\xd0\xbe \xd0\xb1\xd1\x83\xd0\xb4\xd0\xb5\xd1\x82 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd1\x87\xd0\xba\xd0\xb0\n            for w in l.findall(\'word\'):\n                line.append(w.text)\n            strofa.append([pun(line), u]) # \xd1\x87\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd0\xbc \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb1\xd0\xb5\xd0\xbb\xd1\x8b \xd0\xb2 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb5\n            if l.attrib[\'number\'] in var_numbers: # \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb5\xd1\x80\xd1\x8f\xd0\xb5\xd0\xbc, \xd0\xb5\xd1\x81\xd1\x82\xd1\x8c \xd0\xbb\xd0\xb8 \xd1\x83 \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd0\xb8 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd1\x8b \xd0\xbf\xd0\xbe \xd0\xb5\xd0\xb5 \xd0\xbf\xd0\xbe\xd1\x80\xd1\x8f\xd0\xb4\xd0\xba\xd0\xbe\xd0\xb2\xd0\xbe\xd0\xbc\xd1\x83 \xd0\xbd\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x80\xd1\x83 \xd0\xb2 \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd0\xb5\n                new_line = var_lines[var_numbers.index(u)] # \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd0\xbc \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd1\x83 \xd0\xb8\xd0\xb7 \xd1\x81\xd0\xbf\xd0\xb8\xd1\x81\xd0\xba\xd0\xb0\n                strofa.append([\'&\' + new_line, u]) # \xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd0\xba \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd1\x84\xd0\xb5 \xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd0\xb0\xd0\xbd\xd1\x82\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xba\xd1\x83\n        s.append(strofa) # \xd0\xb4\xd0\xbe\xd0\xb1\xd0\xb0\xd0\xb2\xd0\xbb\xd1\x8f\xd0\xb5\xd0\xbc \xd1\x80\xd0\xb0\xd1\x81\xd0\xbf\xd0\xb0\xd1\x80\xd1\x81\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e \xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd1\x84\xd1\x83 \xd0\xba \xd1\x82\xd0\xb5\xd0\xba\xd1\x81\xd1\x82\xd1\x83\n    return dict(s=s, u=u, var_lines=var_lines, var_numbers=var_numbers, books = books, texts=texts)\n\ndef pun(line):\n    l = \' \'.join(line)\n    l = l.replace(\' ,\', \',\')\n    l = l.replace(\' .\', \',\')\n    l = l.replace(\' - \', \'-\')\n    return l\n\nresponse._vars=response._caller(show3)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/concordance/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/concordance/web2py/applications/test/controllers/show.py", line 92, in <module>\n  File "/home/concordance/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/concordance/web2py/applications/test/controllers/show.py", line 38, in show3\n    book.append(all.book.short)\n  File "/home/concordance/web2py/gluon/dal.py", line 8565, in __getattr__\n    self.__allocate()\n  File "/home/concordance/web2py/gluon/dal.py", line 8556, in __allocate\n    self._record = self._table[long(self)]\n  File "/home/concordance/web2py/gluon/dal.py", line 8910, in __getitem__\n    return self._db(self._id == key).select(limitby=(0, 1), orderby_on_limitby=False).first()\n  File "/home/concordance/web2py/gluon/dal.py", line 10525, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1882, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/concordance/web2py/gluon/dal.py", line 1863, in _select_aux\n    return processor(rows,fields,self._colnames,cacheable=cacheable)\n  File "/home/concordance/web2py/gluon/dal.py", line 2248, in parse\n    value = self.parse_value(value,ft,blob_decode)\n  File "/home/concordance/web2py/gluon/dal.py", line 2097, in parse_value\n    return self.parsemap[key](value,field_type)\n  File "/home/concordance/web2py/gluon/dal.py", line 2102, in parse_reference\n    value = Reference(value)\nValueError: invalid literal for long() with base 10: \'\'\n'
p11
s.