(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> A ELE probability distribution must have at least one bin."
p3
sS'layer'
p4
S'/home/concordance/web2py/applications/test/controllers/scikit.py'
p5
sS'code'
p6
S'# coding: utf8\n# \xd0\xbf\xd0\xbe\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb1\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c \xd1\x87\xd1\x82\xd0\xbe-\xd0\xbb\xd0\xb8\xd0\xb1\xd0\xbe \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb0\nimport nltk\n\ndef index():\n    return dict(message="hello from scikit.py")\n\ndef docs():\n    documents = [1,2,3,4,5]\n    featuresets = [(document_features(d), \'pos\') for d in documents]\n    train_set, test_set = featuresets[100:], featuresets[:100]\n    classifier = nltk.NaiveBayesClassifier.train(train_set)\n    t = nltk.classify.accuracy(classifier, test_set)\n    return dict(t=t)\n\ndef document_features(document):\n    f = open(\'/home/concordance/dictionary.txt\', \'r\')\n    words = f.readlines()\n    word_features = [all.split()[0] for all in words[:2000]]\n    features = {}\n    doc_words = [row.word for row in trymysql(trymysql.allword.title==int(document)).select()]\n    document_words = set(doc_words)\n    for word in word_features:\n        features[\'contains({})\'.format(word)] = (word in document_words)\n    return dict(features=features)\n\ndef pos():\n    author_texts = [all.id for all in trymysql(trymysql.text1.author==n).select()]\n    count = trymysql.allword.id.count()\n    words = []\n    for row in trymysql(trymysql.allword.pos==\'NOUN\').select(trymysql.allword.word, count, groupby=trymysql.allword.word):\n        if row[count] >500:\n            words.append([row.allword.word, row[count]])\n    words.sort(key = itemgetter(1), reverse=True)\n\nresponse._vars=response._caller(docs)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/concordance/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/home/concordance/web2py/applications/test/controllers/scikit.py", line 36, in <module>\n  File "/home/concordance/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/concordance/web2py/applications/test/controllers/scikit.py", line 12, in docs\n    classifier = nltk.NaiveBayesClassifier.train(train_set)\n  File "/usr/local/lib/python2.7/dist-packages/nltk/classify/naivebayes.py", line 218, in train\n    label_probdist = estimator(label_freqdist)\n  File "/usr/local/lib/python2.7/dist-packages/nltk/probability.py", line 793, in __init__\n    LidstoneProbDist.__init__(self, freqdist, 0.5, bins)\n  File "/usr/local/lib/python2.7/dist-packages/nltk/probability.py", line 673, in __init__\n    \'must have at least one bin.\')\nValueError: A ELE probability distribution must have at least one bin.\n'
p11
s.